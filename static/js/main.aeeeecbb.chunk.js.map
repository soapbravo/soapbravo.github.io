{"version":3,"sources":["App.js","index.js"],"names":["Content","Layout","TextArea","Input","Text","Typography","getRandomInt","max","Math","floor","random","App","useState","dateEnabled","setDateEnabled","moment","date","setDate","time","setTime","addEnabled","setAddEnabled","amendEnabled","setAmendEnabled","resetEnabled","setResetEnabled","noVerifyEnabled","setNoVerifyEnabled","messageEnabled","setMessageEnabled","message","setMessage","result","setResult","useEffect","newResult","dateString","format","timeString","messageResult","lines","split","i","length","trim","replaceAll","handleRandomHh","useCallback","newTime","clone","hours","handleRandomMm","minutes","handleRandomSs","seconds","className","layout","Item","label","checked","onChange","e","target","disabled","value","allowClear","onClick","RedoOutlined","type","rows","text","readOnly","onCopy","notification","success","CopyOutlined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aeeeecbb.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport moment from 'moment';\nimport {\n  Layout,\n  Checkbox,\n  Input,\n  Form,\n  DatePicker,\n  Typography,\n  Button,\n  notification,\n  TimePicker,\n} from 'antd';\n\nimport {\n  CopyOutlined,\n  RedoOutlined,\n} from '@ant-design/icons';\n\nimport './App.scss';\nimport { CopyToClipboard } from 'react-copy-to-clipboard/lib/Component';\n\nconst { Content } = Layout;\nconst { TextArea } = Input;\nconst { Text } = Typography;\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst ENABLE_LABELS = false;\n\nfunction App() {\n  const [dateEnabled, setDateEnabled] = useState(true);\n  const [date, setDate] = useState(moment());\n  const [time, setTime] = useState(moment());\n\n  const [addEnabled, setAddEnabled] = useState(false);\n  const [amendEnabled, setAmendEnabled] = useState(true);\n  const [resetEnabled, setResetEnabled] = useState(true);\n  const [noVerifyEnabled, setNoVerifyEnabled] = useState(true);\n\n  const [messageEnabled, setMessageEnabled] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const [result, setResult] = useState('');\n\n  useEffect(() => {\n    let newResult = 'git commit';\n\n    if (amendEnabled) {\n      newResult = `${newResult} --amend`;\n    }\n\n    if (noVerifyEnabled) {\n      newResult = `${newResult} --no-verify`;\n    }\n\n    if (dateEnabled) {\n      const dateString = date.format('YYYY-MM-DD');\n      const timeString = time.format('HH:mm:ss');\n\n      newResult = `GIT_COMMITTER_DATE=\"${dateString} ${timeString}\" ${newResult} --date \"${dateString} ${timeString}\"`;\n    }\n\n    if (messageEnabled && message) {\n      let messageResult = '';\n      const lines = message.split(/\\r?\\n/);\n\n      for (let i = 0; i < lines.length; i++) {\n        if (!!lines[i].trim()) {\n          messageResult = `${messageResult} -m \"${lines[i].replaceAll('\"', '\\\\\"')}\"`;\n        }\n      }\n\n      newResult = `${newResult} ${messageResult}`;\n    }\n\n    if (resetEnabled) {\n      newResult = `git reset && ${newResult}`;\n    }\n\n    if (addEnabled) {\n      newResult = `git add . && ${newResult}`;\n    }\n\n    setResult(newResult);\n  }, [dateEnabled, date, time, addEnabled, amendEnabled, resetEnabled, message, messageEnabled, noVerifyEnabled]);\n\n  useEffect(() => {\n    if (addEnabled) {\n      setResetEnabled(false);\n    }\n  }, [addEnabled, setResetEnabled]);\n\n  useEffect(() => {\n    if (resetEnabled) {\n      setAddEnabled(false);\n    }\n  }, [resetEnabled, setAddEnabled]);\n\n  useEffect(() => {\n    if (!amendEnabled) {\n      setResetEnabled(false);\n    }\n  }, [amendEnabled, setResetEnabled]);\n\n  const handleRandomHh = useCallback(() => {\n    const newTime = time?.clone() || moment();\n    newTime.hours(getRandomInt(12) + 10);\n\n    setTime(newTime);\n  }, [time, setTime]);\n\n  const handleRandomMm = useCallback(() => {\n    const newTime = time?.clone() || moment();\n    newTime.minutes(getRandomInt(60));\n\n    setTime(newTime);\n  }, [time, setTime]);\n\n  const handleRandomSs = useCallback(() => {\n    const newTime = time?.clone() || moment();\n    newTime.seconds(getRandomInt(60));\n\n    setTime(newTime);\n  }, [time, setTime]);\n\n  const handleSetNow = () => {\n    setTime(moment());\n    setDate(moment());\n  };\n\n  return (\n    <Layout className=\"app\">\n      <Content className=\"content-wrapper\">\n        <Layout className=\"content-layout\">\n          <Content className=\"content\">\n            <Form layout=\"vertical\">\n              <Form.Item label={ENABLE_LABELS ? 'â–¸ Date' : null}>\n                <Checkbox\n                  checked={dateEnabled}\n                  onChange={e => setDateEnabled(e.target.checked)}\n                >\n                  Add date/time:\n                </Checkbox>\n\n                <DatePicker\n                  disabled={!dateEnabled}\n                  value={date}\n                  onChange={setDate}\n                  format={'YYYY-MM-DD'}\n                  allowClear={false}\n                />\n                &nbsp;\n                <TimePicker\n                  disabled={!dateEnabled}\n                  value={time}\n                  onChange={setTime}\n                  allowClear={false}\n                />\n                &nbsp;\n                <Button\n                  onClick={handleRandomHh}\n                  disabled={!dateEnabled}\n                >\n                  <RedoOutlined />h\n                </Button>\n                &nbsp;\n                <Button\n                  onClick={handleRandomMm}\n                  disabled={!dateEnabled}\n                >\n                  <RedoOutlined />m\n                </Button>\n                &nbsp;\n                <Button\n                  onClick={handleRandomSs}\n                  disabled={!dateEnabled}\n                >\n                  <RedoOutlined />s\n                </Button>\n                &nbsp;\n                <Button\n                  onClick={handleSetNow}\n                  disabled={!dateEnabled}\n                >\n                  Now!\n                </Button>\n              </Form.Item>\n\n              <Form.Item label={ENABLE_LABELS ? 'â–¸ Amend' : null}>\n                <Checkbox\n                  checked={amendEnabled}\n                  onChange={e => setAmendEnabled(e.target.checked)}\n                >\n                  Enable Amend <Text type=\"secondary\">(Disable to make new commit)</Text>\n                </Checkbox>\n              </Form.Item>\n\n              <Form.Item label={ENABLE_LABELS ? 'â–¸ Add .' : null}>\n                <Checkbox\n                  checked={addEnabled}\n                  onChange={e => setAddEnabled(e.target.checked)}\n                >\n                  Enable Add . <Text type=\"secondary\">(Include un-committed files)</Text>\n                </Checkbox>\n              </Form.Item>\n\n              <Form.Item label={ENABLE_LABELS ? 'â–¸ Reset' : null}>\n                <Checkbox\n                  disabled={!amendEnabled}\n                  checked={resetEnabled}\n                  onChange={e => setResetEnabled(e.target.checked)}\n                >\n                  Enable Reset <Text type=\"secondary\">(Exclude un-committed files)</Text>\n                </Checkbox>\n                <br />\n                <Text type=\"secondary\">\n                  This does not change your working tree, just resets HEAD, so that --amend commit won't add new\n                  files and only change date or message\n                </Text>\n              </Form.Item>\n\n              <Form.Item label={ENABLE_LABELS ? 'â–¸ No Hooks!' : null}>\n                <Checkbox\n                  checked={noVerifyEnabled}\n                  onChange={e => setNoVerifyEnabled(e.target.checked)}\n                >\n                  Disable Hooks\n                </Checkbox>\n              </Form.Item>\n\n              <Form.Item label={ENABLE_LABELS ? 'â–¸ Message' : null}>\n                <Checkbox\n                  checked={messageEnabled}\n                  onChange={e => setMessageEnabled(e.target.checked)}\n                >\n                  Enable Message\n                </Checkbox>\n                <br />\n                <TextArea\n                  value={message}\n                  rows={2}\n                  onChange={e => setMessage(e.target.value)}\n                  disabled={!messageEnabled}\n                />\n              </Form.Item>\n\n              <Form.Item label={'â–¸ Result'}>\n                <CopyToClipboard\n                  text={result}\n                  readOnly\n                  onCopy={() => notification.success({ message: 'Copied to clipboard!' })}\n                >\n                  <Button type=\"primary\" className=\"copy-button\"><CopyOutlined /></Button>\n                </CopyToClipboard>\n\n                <TextArea value={result} rows={2} className=\"result-text\" />\n              </Form.Item>\n            </Form>\n          </Content>\n        </Layout>\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}